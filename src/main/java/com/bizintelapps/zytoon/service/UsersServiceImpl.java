/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/manager/ManagerImpl.e.vm.java
 */
package com.bizintelapps.zytoon.service;

import com.bizintelapps.zytoon.service.util.AccessCodeCache;
import com.bizintelapps.zytoon.service.util.EmailTemplate;
import com.bizintelapps.zytoon.service.util.PasswordValidator;
import com.bizintelapps.zytoon.dao.AuthoritiesDao;
import com.bizintelapps.zytoon.dao.TrackIPDao;
import com.bizintelapps.zytoon.dao.UserBasicDao;
import com.bizintelapps.zytoon.dao.UserProfileDao;
import java.text.ParseException;
import java.util.logging.Level;
import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bizintelapps.zytoon.domain.Users;
import com.bizintelapps.zytoon.dao.UsersDao;
import com.bizintelapps.zytoon.domain.Authorities;
import com.bizintelapps.zytoon.domain.TrackIP;
import com.bizintelapps.zytoon.domain.UserBasic;
import com.bizintelapps.zytoon.domain.UserProfile;
import com.bizintelapps.zytoon.security.SpringSecurityContext;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import org.springframework.security.authentication.encoding.ShaPasswordEncoder;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;


import org.springframework.social.facebook.api.Facebook;
import org.springframework.social.facebook.api.FacebookProfile;
import org.springframework.social.facebook.api.impl.FacebookTemplate;

/**
 *
 * Default implementation of the {@link UsersService} interface
 * @see UsersService
 */
@Service("usersService")
@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
public class UsersServiceImpl implements UsersService {

    @SuppressWarnings("unused")
    private static final Logger logger = Logger.getLogger(UsersServiceImpl.class);
    @Autowired
    protected UsersDao usersDao;
    @Autowired
    protected AccessCodeCache accessCodeCache;
    @Autowired
    protected EmailTemplate emailTemplate;
    @Autowired
    protected PasswordValidator passwordValidator;
    @Autowired
    protected ShaPasswordEncoder encoder;
    @Autowired
    protected UserProfileDao userProfileDao;
    @Autowired
    protected UserBasicDao userBasicDao;
    @Autowired
    protected AuthoritiesDao authoritiesDao;
    @Autowired
    protected TrackIPDao trackIPDao;

    @Override
    public void emailAccessCode(String email) {
        // is valid email 
        Users user = this.usersDao.findByUsername(email);
        if (user == null) {
            throw new RuntimeException("Invalid Email : " + email);
        }
        // create access code
        String accessCode = UUID.randomUUID().toString();
        // email access code
        this.emailTemplate.sendAccessCode(email, accessCode);
        // cache access code
        this.accessCodeCache.add(email, accessCode);
    }

    @Override
    @Transactional
    public void resetPassword(String email, String accessCode, String password, String cPassword) {
        // is valid access code
        if (!this.accessCodeCache.isValid(email, accessCode.trim())) {
            throw new RuntimeException("Invalid Email/Access Code, Please generate a new one or try again!");
        }

        passwordValidator.isValidEmailPassword(email, password, cPassword);

        Users users = this.usersDao.findByUsername(email);

        String encryptedPassword = this.encoder.encodePassword(password, null);
        users.setPassword(encryptedPassword);

        this.usersDao.save(users);

        // force authentication
        List<String> authorities = new ArrayList<String>();
        for (Authorities authority : users.getAuthoritieses()) {
            authorities.add(authority.getAuthority());
        }
        SpringSecurityContext.forceAuthentication(email, encryptedPassword, authorities);
    }

    @Override
    public Users getUsersByUsername(String email) {
        return this.usersDao.findByUsername(email);
    }

    @Override
    public UserProfile findByUsername(String username) {
        return this.userProfileDao.findByUsername(username);
    }

    @Override
    public UserBasic findUserBasicByUsername(String username) {
        UserBasic ub = null;
        ub = this.userBasicDao.findByUsername(username);
        if (ub == null) {
            UserProfile up = findByUsername(username);
            save(up);
            ub = this.userBasicDao.findByUsername(username);
        }
        return ub;
    }

    @Override
    @Transactional
    public void signUp(String fullname, String username, String password, String confirmPassword, String ip) {
        this.signUpDetail(fullname, null, null, null, null, null, null, null, null, null, null, username, password, confirmPassword, ip);
        // email
        this.emailTemplate.sendWelcomeEmail(username, fullname);
    }

    private void signUpDetail(String fullname, String fn, String ln, String mi, String gender, String fbId,
            String dob, Integer timezone, Locale locale, String fbLink, String location,
            String username, String password, String confirmPassword, String ip) {

        //validate
        this.passwordValidator.isValidEmailPassword(username, password, confirmPassword);

        // check username
        checkUsername(username);

        // create User
        Users user = new Users();
        user.setEnabled(Boolean.TRUE);
        user.setPassword(this.encoder.encodePassword(password, null));
        user.setUsername(username);
        this.usersDao.save(user);

        // create Authorities
        Authorities authority = new Authorities();
        authority.setUsername(username);
        authority.setAuthority("ROLE_USER");
        this.authoritiesDao.save(authority);

        UserProfile userProfile = new UserProfile();
        userProfile = updateProfile(userProfile, username, fullname, fn, ln, mi, gender, fbId, dob, timezone, locale, fbLink, location);

        // create UserBasic
        UserBasic basic = new UserBasic();
        basic.setName(fullname);
        basic.setUserProfileId(userProfile.getId());
        userBasicDao.save(basic);

        // track ip
        TrackIP trackIP = new TrackIP("user", userProfile.getId(), "c", ip);
        this.trackIPDao.save(trackIP);

        forceLogin(username, password);

    }

    private UserProfile updateProfile(UserProfile userProfile, String username, String fullname, String fn, String ln, String mi, String gender, String fbId, String dob, Integer timezone, Locale locale, String fbLink, String location) {

        // update UserProfile
        userProfile.setUsername(username);
        if (fullname != null && fullname.length() > 0) {
            userProfile.setName(fullname);
        }
        if (fn != null && fn.length() > 0) {
            userProfile.setFirstName(fn);
        }
        if (ln != null && ln.length() > 0) {
            userProfile.setLastName(ln);
        }
        if (mi != null && mi.length() > 0) {
            userProfile.setMiddleInitial(mi);
        }
        if (gender != null && gender.length() > 0) {
            userProfile.setGender(gender);
        }
        userProfile.setFbId(fbId);
        if (dob != null && dob.length() == 10) {
            try {
                DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
                Date date = df.parse(dob);
                userProfile.setDob(date);
            } catch (ParseException ex) {
                java.util.logging.Logger.getLogger(UsersServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        userProfile.setTimezone(timezone);

        userProfile.setLocale(locale);
        userProfile.setFbLink(fbLink);
        if (location != null && location.length() > 0) {
            userProfile.setCity(location);
        }
        this.userProfileDao.save(userProfile);
        return userProfile;
    }

    private void forceLogin(String username, String password) {
        // force user login
        Authorities authority = new Authorities();
        authority.setUsername(username);
        authority.setAuthority("ROLE_USER");

        List<String> authorities = new ArrayList<String>();
        authorities.add(authority.getAuthority());
        SpringSecurityContext.forceAuthentication(username, password, authorities);
    }

    private UserProfile checkUsername(String username) throws RuntimeException {
        UserProfile userProfile = null;
        try {
            userProfile = this.userProfileDao.findByUsername(username);
        } catch (Exception ex) {
        }
        if (userProfile != null && userProfile.isIdSet()) {
            throw new RuntimeException("Email already exists");
        }
        return userProfile;
    }

    @Override
    @Transactional
    public void save(UserProfile userProfile) {

        this.userProfileDao.save(userProfile);

        // update UserBasic
        UserBasic basic = userBasicDao.findByUserProfileId(userProfile.getId());
        if (basic == null) {
            basic = new UserBasic();
        }
        basic.setCity(userProfile.getCity());
        basic.setCountry(userProfile.getCountry());
        basic.setName(userProfile.getName());
        basic.setNickname(userProfile.getLastName());
        basic.setUserProfileId(userProfile.getId());
        this.userBasicDao.save(basic);
    }

    @Override
    @Transactional
    public UserBasic getUserBasicByUserProfileId(Integer userProfileId) {
        UserProfile userProfile = new UserProfile(userProfileId);
        userProfile = this.userProfileDao.get(userProfile);

        UserBasic basic = userBasicDao.findByUserProfileId(userProfile.getId());
        if (basic == null) {
            save(userProfile);
            basic = userBasicDao.findByUserProfileId(userProfile.getId());
        }


        return basic;
    }

    @Override
    public UserBasic getUserBasicById(Integer user) {
        try {
            UserBasic ub = new UserBasic(user);
            ub = this.userBasicDao.get(ub);
            return ub;
        } catch (RuntimeException re) {
        }
        return null;
    }

    @Override
    public UserProfile findByUserProfileId(Integer id) {
        return userProfileDao.get(new UserProfile(id));
    }

    @Override
    @Transactional
    public void fbAccessToken(String accessToken, String ip) {
        //String accessToken = "AAACMFUraaWgBABDJpZA40vqH5zmvtSUBfqFYEc9rZBxQ93mOavQicdMerebmUy2kjaQM95BZA0JDJpoaRwcovadXRo37GIZD";
        Facebook facebook = (Facebook) new FacebookTemplate(accessToken);
        
        FacebookProfile profile = facebook.userOperations().getUserProfile();

        String username = profile.getEmail();
        String name = profile.getName();
        String gender = profile.getGender();
        String fbId = profile.getId();
        String dob = profile.getBirthday();
        String fn = profile.getFirstName();
        String ln = profile.getLastName();
        String mi = profile.getMiddleName();
        String fbLink = profile.getLink();
        Locale locale = profile.getLocale();
        Integer timezone = profile.getTimezone();
        String city = profile.getLocation() != null ? profile.getLocation().getName() : "";
        String password = UUID.randomUUID().toString();
        UserProfile userProfile = null;
        logger.trace("username : " + username);
        try {
            userProfile = this.userProfileDao.findByUsername(username);
            logger.trace("ID " + userProfile.getId());
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        if (userProfile == null) {
            this.signUpDetail(name, fn, ln, mi, gender, fbId, dob, timezone, locale, fbLink, city, username, password, password, ip);
            // email
            this.emailTemplate.sendWelcomeEmailForFB(username, name);
        } else {
            Users users = this.usersDao.findByUsername(username);
            String encryptedPassword = this.encoder.encodePassword(password, null);
            users.setPassword(encryptedPassword);
            this.usersDao.save(users);
            forceLogin(username, password);

            updateProfile(userProfile, username, name, fn, ln, mi, gender, fbId, dob, timezone, locale, fbLink, city);
        }

    }
}