/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.bizintelapps.zytoon.domain;

import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.FetchType.LAZY;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;
import com.bizintelapps.zytoon.validation.JpaUnique;
import javax.persistence.GeneratedValue;
import org.hibernate.envers.Audited;

@Entity
@Table(name = "authorities", uniqueConstraints = { @UniqueConstraint(columnNames = { "username", "authority" }) })
@Audited
@Cache(usage = NONSTRICT_READ_WRITE)
@FilterDef(name = "myAuthoritiesFilter", defaultCondition = "username = :currentAccountId ", parameters = @ParamDef(name = "currentAccountId", type = "org.hibernate.type.StringType"))
@Filter(name = "myAuthoritiesFilter")
@JpaUnique
public class Authorities implements Identifiable<Integer>, Serializable, Copyable<Authorities> {
    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(Authorities.class);

    // Raw attributes
    private String authority; // not null

    // Technical attributes for query by example
    private String username; 
    
    private Integer id; // pk

    // Many to one
    private Users users; // pk (username)

    // ---------------------------
    // Constructors
    // ---------------------------

    public Authorities() {
    }

    public Authorities(Integer primaryKey) {
        this();
        setPrimaryKey(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------

    @Transient
    @XmlTransient
    public Integer getPrimaryKey() {
        return getId();
    }

    public void setPrimaryKey(Integer id) {
        setId(id);
    }

    @Transient
    @XmlTransient
    public boolean isPrimaryKeySet() {
        return isIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------

    
    @Column(nullable = false, unique = true, precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }
    
    // -- [username] ------------------------

    @Column(nullable = false, length = 50, updatable = false)
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Transient
    public boolean isUsernameSet() {
        return username != null && !username.isEmpty();
    }

    // -- [authority] ------------------------

    @NotEmpty
    @Length(max = 50)
    @Column(nullable = false, length = 50)
    public String getAuthority() {
        return authority;
    }

    public void setAuthority(String authority) {
        this.authority = authority;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Authorities.username ==> Users.username
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "username", nullable = false, insertable = false, updatable = false)
    @ManyToOne(cascade = PERSIST, fetch = LAZY)
    public Users getUsers() {
        return users;
    }

    /**
     * Set the users without adding this Authorities instance on the passed users
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by Users
     */
    public void setUsers(Users users) {
        this.users = users;

        // We set the foreign key property so it can be used by Hibernate search by Example facility.
        if (users != null) {
            setUsername(users.getUsername());
        } // when null, we do not propagate it to the pk.
    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------

    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    // -----------------------------------------
    // equals and hashCode
    // -----------------------------------------

    // The first time equals or hashCode is called,
    // we check if the primary key is present or not.
    // If yes: we use it in equals/hashCode
    // If no: we use a VMID during the entire life of this
    // instance even if later on this instance is assigned
    // a primary key.

    @Override
    public boolean equals(Object authorities) {
        if (this == authorities) {
            return true;
        }

        if (!(authorities instanceof Authorities)) {
            return false;
        }

        Authorities other = (Authorities) authorities;
        return _getUid().equals(other._getUid());
    }

    @Override
    public int hashCode() {
        return _getUid().hashCode();
    }

    private Object _uid;

    private Object _getUid() {
        if (_uid == null) {
            if (isPrimaryKeySet()) {
                _uid = getPrimaryKey();
            } else {
                _uid = new java.rmi.dgc.VMID();
                logger
                        .warn("DEVELOPER: hashCode has changed!."
                                + "If you encounter this message you should take the time to carefuly review equals/hashCode for: "
                                + getClass().getCanonicalName());
            }
        }
        return _uid;
    }

    // -----------------------------------------
    // toString
    // -----------------------------------------

    /**
     * Construct a readable string representation for this Authorities instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("authorities.username=[").append(getUsername()).append("]\n");
        result.append("authorities.authority=[").append(getAuthority()).append("]\n");
        return result.toString();
    }

    // -----------------------------------------
    // Copyable Implementation
    // (Support for REST web layer)
    // -----------------------------------------

    /**
     * Return a copy of the current object
     */
    @Override
    public Authorities copy() {
        Authorities authorities = new Authorities();
        copyTo(authorities);
        return authorities;
    }

    /**
     * Copy the current properties to the given object
     */
    @Override
    public void copyTo(Authorities authorities) {
        authorities.setUsername(getUsername());
        authorities.setAuthority(getAuthority());
        if (getUsers() != null) {
            authorities.setUsers(new Users(getUsers().getPrimaryKey()));
        }
    }
}