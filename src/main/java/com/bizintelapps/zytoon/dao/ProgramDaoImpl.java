/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/hibernate/DAOHibernate.e.vm.java
 */
package com.bizintelapps.zytoon.dao;

import java.util.List;
import java.util.Date;
import java.util.Calendar;
import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import com.bizintelapps.zytoon.dao.hibernate.HibernateUtil;
import com.bizintelapps.zytoon.dao.support.SearchTemplate;

import com.bizintelapps.zytoon.domain.Program;
import com.bizintelapps.zytoon.dao.hibernate.HibernateGenericDao;

/**
 * Hibernate implementation of the Program DAO interface.
 */
@Repository
public class ProgramDaoImpl extends HibernateGenericDao<Program, Integer> implements ProgramDao {
    public ProgramDaoImpl() {
        super(Program.class);
    }

    /**
     * Constructs the search by example criteria using not only the passed program but also its associated entities. 
     */
    @Override
    public Criteria getCriteria(Program program, SearchTemplate searchTemplate) {
        // Call super to construct the criteria of the 'root' entity.
        Criteria criteria = super.getCriteria(program, searchTemplate);

        // many-to-one: "programStructure"
        // Note 1: If 'programStructureId' != null, no need to add a criteria as the current criteria 
        // already takes this property into account.
        // Note 2: By convention, if the example for "programStructure" has no property set 
        // and "programStructure" is not null we assume that you want a not null criteria. 
        if (program.getProgramStructureId() == null && program.getProgramStructure() != null) {
            criteria.add(Restrictions.isNotNull("programStructure"));
            criteria.createCriteria("programStructure").add(
                    HibernateUtil.constructExample(program.getProgramStructure(), searchTemplate));
        }

        return criteria;
    }

    @Override
    public List<Program> findByStatus(String username) {
        return getEntityManager().createNamedQuery("Program.findByStatus", Program.class)
                //.setParameter("status", status)
                .setParameter("username", username)
                //.setParameter("enrollmentStatus", enrollmentStatus)
                .setMaxResults(20)
                .getResultList();
    }
    
    @Override
    public void updateExpiredPrograms(Date date) {
        Calendar dt = Calendar.getInstance();
        getEntityManager().createQuery("UPDATE Program p SET p.isActive = false WHERE p.isActive = true AND p.startDate <= :startDate")
                .setParameter("startDate", dt.getTime())
                .executeUpdate();
    }
    
    @Override
    public Program findById(Integer programId) {
        return getEntityManager().find(Program.class, programId);
    }
}