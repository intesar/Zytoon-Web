/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.bizintelapps.zytoon.domain;

import javax.persistence.NamedQueries;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.QueryHint;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.FilterDef;
import org.hibernate.annotations.ParamDef;
import org.hibernate.validator.constraints.Length;
import org.hibernate.validator.constraints.NotEmpty;
import com.bizintelapps.zytoon.validation.JpaUnique;
import javax.persistence.OneToMany;
import org.hibernate.envers.Audited;

@Entity
@Table(name = "users")
@Audited
@NamedQueries({
    @NamedQuery(name = "Users.selectAll", query = "from com.bizintelapps.zytoon.domain.Users as users where 1 = 1", hints = {
        @QueryHint(name = "org.hibernate.comment", value = "enableDynamicOrderBySupport"),
        @QueryHint(name = "org.hibernate.cacheable", value = "true")}),
    @NamedQuery(name = "Users.findByUsername", query = "SELECT u FROM Users u WHERE u.username = :username")
})
@Cache(usage = NONSTRICT_READ_WRITE)
@FilterDef(name = "myUsersFilter", defaultCondition = "username = :currentAccountId ", parameters =
@ParamDef(name = "currentAccountId", type = "org.hibernate.type.StringType"))
@Filter(name = "myUsersFilter")
@JpaUnique
public class Users implements Identifiable<String>, Serializable, Copyable<Users> {

    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(Users.class);
    // Raw attributes
    private String username; // pk
    private String password; // not null
    private Boolean enabled; // not null
    private List<Authorities> authoritieses;

    // ---------------------------
    // Constructors
    // ---------------------------
    public Users() {
    }

    public Users(String primaryKey) {
        this();
        setPrimaryKey(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------
    @Transient
    @XmlTransient
    public String getPrimaryKey() {
        return getUsername();
    }

    public void setPrimaryKey(String username) {
        setUsername(username);
    }

    @Transient
    @XmlTransient
    public boolean isPrimaryKeySet() {
        return isUsernameSet();
    }

    // -------------------------------
    // Role names support
    // -------------------------------
    /**
     * Default implementation returns hard coded granted authorities for this account (i.e. "ROLE_USER" and "ROLE_ADMIN").
     * TODO: You should override this method to provide your own custom authorities using your own logic.
     * Or you can follow Celerio Account Table convention. Please refer to Celerio Documentation.
     */
    @Transient
    @XmlTransient
    public List<String> getRoleNames() {
        List<String> roleNames = new ArrayList<String>();
        for (Authorities a : authoritieses) {
            roleNames.add(a.getAuthority());
            if (logger.isTraceEnabled()) {
                logger.trace(a.getUsername() + " role " + a.getAuthority());
            }
        }
        return roleNames;
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------
    // -- [username] ------------------------
    @NotEmpty
    @Length(max = 50)
    @Column(nullable = false, unique = true, length = 50)
    @Id
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    @Transient
    public boolean isUsernameSet() {
        return username != null && !username.isEmpty();
    }

    // -- [password] ------------------------
    @NotEmpty
    @Length(max = 50)
    @Column(nullable = false, length = 50)
    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    // -- [enabled] ------------------------
    @NotNull
    @Column(nullable = false, length = 0)
    public Boolean getEnabled() {
        return enabled;
    }

    public void setEnabled(Boolean enabled) {
        this.enabled = enabled;
    }

    @OneToMany(mappedBy = "users")
    public List<Authorities> getAuthoritieses() {
        return authoritieses;
    }

    public void setAuthoritieses(List<Authorities> authoritieses) {
        this.authoritieses = authoritieses;
    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------
    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Users other = (Users) obj;
        if ((this.username == null) ? (other.username != null) : !this.username.equals(other.username)) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 67 * hash + (this.username != null ? this.username.hashCode() : 0);
        return hash;
    }

    // -----------------------------------------
    // toString
    // -----------------------------------------
    /**
     * Construct a readable string representation for this Users instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("users.username=[").append(getUsername()).append("]\n");
        result.append("users.password=[").append(getPassword()).append("]\n");
        result.append("users.enabled=[").append(getEnabled()).append("]\n");
        return result.toString();
    }

    // -----------------------------------------
    // Copyable Implementation
    // (Support for REST web layer)
    // -----------------------------------------
    /**
     * Return a copy of the current object
     */
    @Override
    public Users copy() {
        Users users = new Users();
        copyTo(users);
        return users;
    }

    /**
     * Copy the current properties to the given object
     */
    @Override
    public void copyTo(Users users) {
        users.setUsername(getUsername());
        users.setPassword(getPassword());
        users.setEnabled(getEnabled());
    }
}