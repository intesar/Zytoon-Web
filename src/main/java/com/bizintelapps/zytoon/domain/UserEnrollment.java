/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.bizintelapps.zytoon.domain;

import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import static javax.persistence.CascadeType.DETACH;
import static javax.persistence.FetchType.LAZY;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.hibernate.validator.constraints.Length;
import com.bizintelapps.zytoon.validation.JpaUnique;
import java.util.Date;
import javax.persistence.Temporal;
import org.hibernate.envers.Audited;
import java.util.List;
import java.util.ArrayList;
import static javax.persistence.TemporalType.DATE;
import org.springframework.format.annotation.DateTimeFormat;
import static com.bizintelapps.zytoon.util.ResourcesUtil.DATE_FORMAT_PATTERN;

@Entity
@Table(name = "user_enrollment")
@Audited
@Cache(usage = NONSTRICT_READ_WRITE)
@JpaUnique
@NamedQueries({
    @NamedQuery(name = "UserEnrollment.findByActiveAndNotDueAndReportDate",
    query = "SELECT e FROM UserEnrollment e WHERE e.isActive = :isActive AND e.isReportDue = :isReportDue AND e.reportDate <= :reportDate "),
    @NamedQuery(name = "UserEnrollment.findDueEnrollments",
    query = "SELECT e FROM UserEnrollment e WHERE e.isActive = true AND e.isReportDue = true AND e.userId = :userId ORDER BY e.reportDate"),
    @NamedQuery(name = "UserEnrollment.findActivePrograms",
    query = "SELECT e.program FROM UserEnrollment e WHERE e.isActive = true AND e.userId = (SELECT u.id FROM UserProfile u WHERE u.username = :username)"),
    @NamedQuery(name = "UserEnrollment.findUserByDueEnrollmentAndDate",
    query = "SELECT DISTINCT e.user FROM UserEnrollment e WHERE e.isActive = true AND e.isReportDue = true AND e.reportDate = :reportDate"),
    @NamedQuery(name = "UserEnrollment.findByInactivity",
    query = "SELECT e.user from UserEnrollment e GROUP BY e.user HAVING MAX(e.reportDate) < :reportDate AND SUM(e.isActive) = 0")
})
public class UserEnrollment implements Identifiable<Integer>, Serializable, Copyable<UserEnrollment> {

    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(UserEnrollment.class);
    // Raw attributes
    private Integer id; // pk
    private String result;
    // Technical attributes for query by example
    private Integer userId;
    private Integer programId;
    // Many to one
    private UserProfile user; // (userId)
    private Program program; // (programId)
    private Boolean isReportDue;
    private Date reportDate;
    private Boolean isActive;
    //private List<Report> reports = new ArrayList<Report>();

    // ---------------------------
    // Constructors
    // ---------------------------
    public UserEnrollment() {
    }

    public UserEnrollment(Integer primaryKey) {
        this();
        setPrimaryKey(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------
    @Transient
    @XmlTransient
    public Integer getPrimaryKey() {
        return getId();
    }

    public void setPrimaryKey(Integer id) {
        setId(id);
    }

    @Transient
    @XmlTransient
    public boolean isPrimaryKeySet() {
        return isIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------
    // -- [id] ------------------------
    @Column(nullable = false, unique = true, precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    // -- [userId] ------------------------
    @Column(name = "user_id", precision = 10, insertable = false, updatable = false)
    public Integer getUserId() {
        return userId;
    }

    private void setUserId(Integer userId) {
        this.userId = userId;
    }

    // -- [programId] ------------------------
    @Column(name = "program_id", precision = 10, insertable = false, updatable = false)
    public Integer getProgramId() {
        return programId;
    }

    private void setProgramId(Integer programId) {
        this.programId = programId;
    }

    // -- [result] ------------------------
    @Length(max = 50)
    @Column(length = 50)
    public String getResult() {
        return result;
    }

    public void setResult(String result) {
        this.result = result;
    }

    @Column(name = "is_report_due", insertable = true, updatable = true)
    public Boolean getIsReportDue() {
        return isReportDue;
    }

    public void setIsReportDue(Boolean isReportDue) {
        this.isReportDue = isReportDue;
    }

    // -- [reportDate] ------------------------
    @Column(name = "report_date", length = 10)
    @Temporal(DATE)
    @DateTimeFormat(pattern = DATE_FORMAT_PATTERN)
    public Date getReportDate() {
        return reportDate;
    }

    public void setReportDate(Date reportDate) {
        this.reportDate = reportDate;
    }

    @Column(name = "is_active", insertable = true, updatable = true)
    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: UserEnrollment.userId ==> UserProfile.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "user_id")
    @ManyToOne(cascade = DETACH, fetch = LAZY)
    public UserProfile getUser() {
        return user;
    }

    /**
     * Set the user without adding this UserEnrollment instance on the passed user
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by UserProfile
     */
    public void setUser(UserProfile user) {
        this.user = user;

        // We set the foreign key property so it can be used by Hibernate search by Example facility.
        if (user != null) {
            setUserId(user.getId());
        } else {
            setUserId(null);
        }
    }

    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: UserEnrollment.programId ==> Program.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "program_id")
    @ManyToOne(cascade = DETACH, fetch = LAZY)
    public Program getProgram() {
        return program;
    }

    /**
     * Set the program without adding this UserEnrollment instance on the passed program
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by Program
     */
    public void setProgram(Program program) {
        this.program = program;

        // We set the foreign key property so it can be used by Hibernate search by Example facility.
        if (program != null) {
            setProgramId(program.getId());
        } else {
            setProgramId(null);
        }
    }

//    @Transient
//    public List<Report> getReports() {
//        return reports;
//    }
//
//    public void setReports(List<Report> reports) {
//        this.reports = reports;
//    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------
    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final UserEnrollment other = (UserEnrollment) obj;
        if (this.id != other.id && (this.id == null || !this.id.equals(other.id))) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 43 * hash + (this.id != null ? this.id.hashCode() : 0);
        return hash;
    }

    // -----------------------------------------
    // toString
    // -----------------------------------------
    /**
     * Construct a readable string representation for this UserEnrollment instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append("userEnrollment.id=[").append(getId()).append("]\n");
        result.append("userEnrollment.userId=[").append(getUserId()).append("]\n");
        result.append("userEnrollment.programId=[").append(getProgramId()).append("]\n");
        result.append("userEnrollment.result=[").append(getResult()).append("]\n");
        return result.toString();
    }

    // -----------------------------------------
    // Copyable Implementation
    // (Support for REST web layer)
    // -----------------------------------------
    /**
     * Return a copy of the current object
     */
    @Override
    public UserEnrollment copy() {
        UserEnrollment userEnrollment = new UserEnrollment();
        copyTo(userEnrollment);
        return userEnrollment;
    }

    /**
     * Copy the current properties to the given object
     */
    @Override
    public void copyTo(UserEnrollment userEnrollment) {
        userEnrollment.setId(getId());
        //userEnrollment.setUserId(getUserId());
        //userEnrollment.setProgramId(getProgramId());
        userEnrollment.setResult(getResult());
        if (getUser() != null) {
            userEnrollment.setUser(new UserProfile(getUser().getPrimaryKey()));
        }
        if (getProgram() != null) {
            userEnrollment.setProgram(new Program(getProgram().getPrimaryKey()));
        }
    }
}