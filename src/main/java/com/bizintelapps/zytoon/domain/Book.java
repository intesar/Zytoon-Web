/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/domain/Entity.e.vm.java
 */
package com.bizintelapps.zytoon.domain;

import javax.validation.constraints.NotNull;
import static javax.persistence.CascadeType.PERSIST;
import static org.hibernate.annotations.CacheConcurrencyStrategy.NONSTRICT_READ_WRITE;
import static com.bizintelapps.zytoon.util.ResourcesUtil.DATE_FORMAT_PATTERN;
import java.io.Serializable;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.Transient;
import javax.xml.bind.annotation.XmlTransient;
import org.apache.log4j.Logger;
import org.hibernate.annotations.Cache;
import org.springframework.format.annotation.DateTimeFormat;
import com.bizintelapps.zytoon.validation.JpaUnique;
import java.util.Calendar;
import javax.persistence.FetchType;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.TemporalType;
import org.hibernate.envers.Audited;
import org.joda.time.Period;
import org.joda.time.PeriodType;

@Entity
@Table(name = "book")
@Audited
@Cache(usage = NONSTRICT_READ_WRITE)
@JpaUnique
@NamedQueries({
    @NamedQuery(name = "Book.findLatest", query = "SELECT b FROM Book b WHERE b.isActive = true ORDER BY b.postDate DESC"),
    @NamedQuery(name = "Book.findByUrl", query = "SELECT b FROM Book b WHERE b.url = :url")
})
public class Book implements Identifiable<Integer>, Serializable, Copyable<Book> {

    private static final long serialVersionUID = 1L;
    private static final Logger logger = Logger.getLogger(Book.class);
    // Raw attributes
    private Integer id; // pk
    private Date postDate;
    // active, expired
    private Boolean isActive;
    private String title;
    private String url;
    private Integer a;
    private String ip;
    // Technical attributes for query by example
    private Integer userProfileId;
    // Many to one
    private UserProfile userProfile; // 

    // ---------------------------
    // Constructors
    // ---------------------------
    public Book() {
    }

    public Book(Integer primaryKey) {
        this();
        setPrimaryKey(primaryKey);
    }

    // ---------------------------
    // Identifiable implementation
    // ---------------------------
    @Transient
    @XmlTransient
    @Override
    public Integer getPrimaryKey() {
        return getId();
    }

    @Override
    public void setPrimaryKey(Integer id) {
        setId(id);
    }

    @Transient
    @XmlTransient
    @Override
    public boolean isPrimaryKeySet() {
        return isIdSet();
    }

    // -------------------------------
    // Getter & Setter
    // -------------------------------
    // -- [id] ------------------------
    @Column(nullable = false, unique = true, precision = 10)
    @GeneratedValue
    @Id
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Transient
    public boolean isIdSet() {
        return id != null;
    }

    @Transient
    public String getFormatedPostDate() {
        String dt = "";
//        if (postDate != null) {
//            String PATTERN = "EEE, MMM d";
//            DateFormat df = new SimpleDateFormat(PATTERN);
//            dt = df.format(postDate);
//        }
         Period p = new Period(postDate.getTime(), Calendar.getInstance().getTimeInMillis(), PeriodType.yearMonthDayTime());
         int days = p.getDays();
         if ( days > 0 ) {
             return days + " days ago";
         } else {
             return p.getHours() + " hours ago";
         }
    }

    public void setFormatedStartDate(String dt) {
    }
    // -- [programStructureId] ------------------------

    @Column(name = "user_profile_id", precision = 10, insertable = false, updatable = false)
    public Integer getUserProfileId() {
        return userProfileId;
    }

    private void setUserProfileId(Integer userProfileId) {
        this.userProfileId = userProfileId;
    }

    // -- [startDate] ------------------------
    @Column(name = "post_date", length = 10)
    @Temporal(TemporalType.TIMESTAMP)
    @DateTimeFormat(pattern = DATE_FORMAT_PATTERN)
    public Date getPostDate() {
        return postDate;
    }

    public void setPostDate(Date postDate) {
        this.postDate = postDate;
    }

    // -- [isActive] ------------------------
    @Column(name = "is_active")
    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    public Integer getA() {
        return a;
    }

    public void setA(Integer a) {
        this.a = a;
    }

    @NotNull
    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    @NotNull
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    @NotNull
    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    // --------------------------------------------------------------------
    // Many to One support
    // --------------------------------------------------------------------
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // many-to-one: Program.programStructureId ==> ProgramStructure.id
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    @Cache(usage = NONSTRICT_READ_WRITE)
    @JoinColumn(name = "user_profile_id")
    @ManyToOne(cascade = PERSIST, fetch = FetchType.EAGER)
    public UserProfile getUserProfile() {
        return userProfile;
    }

    /**
     * Set the programStructure without adding this Program instance on the passed programStructure
     * If you want to preserve referential integrity we recommend to use
     * instead the corresponding adder method provided by ProgramStructure
     */
    public void setUserProfile(UserProfile userProfile) {
        this.userProfile = userProfile;

        // We set the foreign key property so it can be used by Hibernate search by Example facility.
        if (userProfile != null) {
            setUserProfileId(userProfile.getId());
        } else {
            setUserProfileId(null);
        }
    }

    // -----------------------------------------
    // Set defaults values
    // -----------------------------------------
    /**
     * Set the default values.
     */
    public void initDefaultValues() {
    }

    // -----------------------------------------
    // equals and hashCode
    // -----------------------------------------
    // The first time equals or hashCode is called,
    // we check if the primary key is present or not.
    // If yes: we use it in equals/hashCode
    // If no: we use a VMID during the entire life of this
    // instance even if later on this instance is assigned
    // a primary key.
    @Override
    public boolean equals(Object program) {
        if (this == program) {
            return true;
        }

        if (!(program instanceof Book)) {
            return false;
        }

        Book other = (Book) program;
        return _getUid().equals(other._getUid());
    }

    @Override
    public int hashCode() {
        return _getUid().hashCode();
    }
    private Object _uid;

    private Object _getUid() {
        if (_uid == null) {
            if (isPrimaryKeySet()) {
                _uid = getPrimaryKey();
            } else {
                _uid = new java.rmi.dgc.VMID();
                logger.warn("DEVELOPER: hashCode has changed!."
                        + "If you encounter this message you should take the time to carefuly review equals/hashCode for: "
                        + getClass().getCanonicalName());
            }
        }
        return _uid;
    }

    // -----------------------------------------
    // toString
    // -----------------------------------------
    /**
     * Construct a readable string representation for this Program instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return "Book{" + "id=" + id + ", postDate=" + postDate + ", isActive=" + isActive + ", title=" + title + ", url=" + url + ", a=" + a + ", userProfileId=" + userProfileId + ", userProfile=" + userProfile + ", _uid=" + _uid + '}';
    }

    // -----------------------------------------
    // Copyable Implementation
    // (Support for REST web layer)
    // -----------------------------------------
    /**
     * Return a copy of the current object
     */
    @Override
    public Book copy() {
        Book program = new Book();
        copyTo(program);
        return program;
    }

    /**
     * Copy the current properties to the given object
     */
    @Override
    public void copyTo(Book book) {
        book.setId(getId());
        book.setA(a);
        //book.setFormatedStartDate(url);
        book.setIsActive(isActive);
        book.setPostDate(postDate);
        book.setTitle(title);
        book.setUrl(url);
        book.setUserProfile(userProfile);
    }
}
