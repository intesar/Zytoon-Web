/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/hibernate/DAOHibernate.e.vm.java
 */
package com.bizintelapps.zytoon.dao;

import com.bizintelapps.zytoon.domain.Program;
import org.hibernate.Criteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;
import com.bizintelapps.zytoon.dao.hibernate.HibernateUtil;
import com.bizintelapps.zytoon.dao.support.SearchTemplate;

import com.bizintelapps.zytoon.domain.UserEnrollment;
import com.bizintelapps.zytoon.dao.hibernate.HibernateGenericDao;
import com.bizintelapps.zytoon.domain.UserProfile;
import java.util.Date;
import java.util.List;

/**
 * Hibernate implementation of the UserEnrollment DAO interface.
 */
@Repository
public class UserEnrollmentDaoImpl extends HibernateGenericDao<UserEnrollment, Integer> implements UserEnrollmentDao {
    public UserEnrollmentDaoImpl() {
        super(UserEnrollment.class);
    }

    /**
     * Constructs the search by example criteria using not only the passed userEnrollment but also its associated entities. 
     */
    @Override
    public Criteria getCriteria(UserEnrollment userEnrollment, SearchTemplate searchTemplate) {
        // Call super to construct the criteria of the 'root' entity.
        Criteria criteria = super.getCriteria(userEnrollment, searchTemplate);

        // many-to-one: "user"
        // Note 1: If 'userId' != null, no need to add a criteria as the current criteria 
        // already takes this property into account.
        // Note 2: By convention, if the example for "user" has no property set 
        // and "user" is not null we assume that you want a not null criteria. 
        if (userEnrollment.getUserId() == null && userEnrollment.getUser() != null) {
            criteria.add(Restrictions.isNotNull("user"));
            criteria.createCriteria("user").add(
                    HibernateUtil.constructExample(userEnrollment.getUser(), searchTemplate));
        }

        // many-to-one: "program"
        // Note 1: If 'programId' != null, no need to add a criteria as the current criteria 
        // already takes this property into account.
        // Note 2: By convention, if the example for "program" has no property set 
        // and "program" is not null we assume that you want a not null criteria. 
        if (userEnrollment.getProgramId() == null && userEnrollment.getProgram() != null) {
            criteria.add(Restrictions.isNotNull("program"));
            criteria.createCriteria("program").add(
                    HibernateUtil.constructExample(userEnrollment.getProgram(), searchTemplate));
        }

        return criteria;
    }
    
    @Override
    public List<UserEnrollment> findByActiveAndNotDueAndReportDate(Boolean isActive, Boolean isDue, Date reportDate) {
        return this.getEntityManager().createNamedQuery("UserEnrollment.findByActiveAndNotDueAndReportDate")
                .setParameter("isActive", isActive)
                .setParameter("isReportDue", isDue)
                .setParameter("reportDate", reportDate)
                .setMaxResults(1000)
                .getResultList();
    }
    
    @Override
    public List<UserEnrollment> findDueEnrollments(Integer userId) {
        return this.getEntityManager().createNamedQuery("UserEnrollment.findDueEnrollments", UserEnrollment.class)
                .setParameter("userId", userId)
                .getResultList();
    }

    @Override
    public List<UserProfile> findUserByDueEnrollmentAndDate(Date date) {
        return this.getEntityManager().createNamedQuery("UserEnrollment.findUserByDueEnrollmentAndDate", UserProfile.class)
                .setParameter("reportDate", date)
                .getResultList();
    }

    @Override
    public List<UserProfile> findByInactivity(Date date) {
        return this.getEntityManager().createNamedQuery("UserEnrollment.findByInactivity", UserProfile.class)
                .setParameter("reportDate", date)
                .getResultList();
    }

    @Override
    public List<Program> findActivePrograms(String username) {
        return this.getEntityManager().createNamedQuery("UserEnrollment.findActivePrograms", Program.class)
                .setParameter("username", username)
                .getResultList();
    }
}