/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/manager/ManagerImpl.e.vm.java
 */
package com.bizintelapps.zytoon.service;

import com.bizintelapps.zytoon.service.util.EmailTemplate;
import com.bizintelapps.zytoon.dao.BookDao;
import com.bizintelapps.zytoon.dao.UserProfileDao;
import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bizintelapps.zytoon.domain.Book;
import java.net.URL;
import java.net.URLConnection;
import java.util.Calendar;
import java.util.List;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * Default implementation of the {@link UsersService} interface
 * @see UsersService
 */
@Service("wallService")
@Transactional(propagation = Propagation.REQUIRED, readOnly=true)
public class WallServiceImpl implements WallService {

    @SuppressWarnings("unused")
    private static final Logger logger = Logger.getLogger(WallServiceImpl.class);
    @Autowired
    protected BookDao bookDao;
    @Autowired
    protected UserProfileDao userProfileDao;
    @Autowired
    protected EmailTemplate emailTemplate;


    @Override
    @Transactional
    public void addBook(String title, String url, String username, String ip) {
        // is valid url
        // isValidUrl(url);
        // find if duplicate
        Book oldBookEntry = this.bookDao.findByUrl(url);
        if (oldBookEntry != null && oldBookEntry.isIdSet()) {
            throw new RuntimeException("The Book URL is already submitted!");
        }

        Book book = new Book();
        book.setTitle(title);
        book.setUrl(url);
        book.setIp(ip);
        book.setA(1);
        book.setIsActive(Boolean.TRUE);
        book.setPostDate(Calendar.getInstance().getTime());
        book.setUserProfile(userProfileDao.findByUsername(username));

        bookDao.save(book);

        // send governance email to admins

        emailTemplate.sendEmail("governance@zytoon.me", title, title + "<br/> " + url + username);
    }

    @Override
    public List<Book> getBooks(int startPosition, int maxResults) {
        return this.bookDao.findBooks(startPosition, maxResults);
    }

    @Override
    public void awesomeBook(Integer bookId, String username) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public List<Book> myBooks(String username) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    private void isValidUrl(String site) {
        try {
            URL url = new URL(site);
            URLConnection conn = url.openConnection();
            conn.connect();
        } catch (Exception e) {
            throw new RuntimeException("Invalid url");
        }
    }
}