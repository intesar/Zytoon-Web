/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/hibernate/DAOHibernate.e.vm.java
 */
package com.bizintelapps.zytoon.dao;

import com.bizintelapps.zytoon.domain.SalahDaily;
import java.util.List;
import org.springframework.stereotype.Repository;

import com.bizintelapps.zytoon.dao.hibernate.HibernateGenericDao;
import com.bizintelapps.zytoon.domain.SalahMonthly;

/**
 * Hibernate implementation of the UserProfile DAO interface.
 */
@Repository
public class SalahMonthlyDaoImpl extends HibernateGenericDao<SalahMonthly, Integer> implements SalahMonthlyDao {
    public SalahMonthlyDaoImpl() {
        super(SalahMonthly.class);
    }

    @Override
    public List<SalahDaily> findDailyByUserAndDate(Integer userId, Integer month, Integer year) {
        List<SalahDaily> list = null;
        try {
            list = this.getEntityManager().createNamedQuery("SalahMonthly.findByUserAndDate", SalahDaily.class)
                .setParameter("userId", userId)
                .setParameter("month", month)
                .setParameter("year", year)
                .getResultList();
        } catch ( RuntimeException re){}
        
        return list;
    }

    @Override
    public SalahMonthly findByUserAndDate(Integer userId, Integer month, Integer year) {
        SalahMonthly hs = null;
        try {
            hs = this.getEntityManager().createNamedQuery("SalahMonthly.findByUserAndDate", SalahMonthly.class)
                .setParameter("userId", userId)
                .setParameter("month", month)
                .setParameter("year", year)
                .getSingleResult();
        } catch ( RuntimeException re){}
        return hs;
    }

    @Override
    public List<SalahMonthly> findAllByUserAndDate(Integer userId, Integer month, Integer year) {
        List<SalahMonthly> hs = null;
        try {
            hs = this.getEntityManager().createNamedQuery("SalahMonthly.findAllByUserAndDate", SalahMonthly.class)
                .setParameter("userId", userId)
                .setParameter("month", month)
                .setParameter("year", year)
                .getResultList();
        } catch ( RuntimeException re){}
        return hs;
    }
   
}