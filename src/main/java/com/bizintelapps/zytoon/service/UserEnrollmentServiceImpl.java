/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/manager/ManagerImpl.e.vm.java
 */
package com.bizintelapps.zytoon.service;

import com.bizintelapps.zytoon.dao.FoodReportDao;
import com.bizintelapps.zytoon.dao.OneRuleProgramReportDao;
import com.bizintelapps.zytoon.service.util.EmailTemplate;
import com.bizintelapps.zytoon.dao.ProgramDao;
import com.bizintelapps.zytoon.dao.SalahReportDao;
import com.bizintelapps.zytoon.domain.Report;
import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bizintelapps.zytoon.domain.UserEnrollment;
import com.bizintelapps.zytoon.dao.UserEnrollmentDao;
import com.bizintelapps.zytoon.dao.UserProfileDao;
import com.bizintelapps.zytoon.dao.UserProgramHistoryDao;
import com.bizintelapps.zytoon.domain.FoodReport;
import com.bizintelapps.zytoon.domain.OneRuleProgramReport;
import com.bizintelapps.zytoon.domain.Program;
import com.bizintelapps.zytoon.domain.ProgramStructure;
import com.bizintelapps.zytoon.domain.ReportDto;
import com.bizintelapps.zytoon.domain.SalahReport;
import com.bizintelapps.zytoon.domain.UserProfile;
import com.bizintelapps.zytoon.domain.UserProgramHistory;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import org.springframework.scheduling.annotation.Async;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * Default implementation of the {@link UserEnrollmentService} interface
 * @see UserEnrollmentService
 */
@Service("userEnrollmentService")
@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
public class UserEnrollmentServiceImpl implements
        UserEnrollmentService {

    @SuppressWarnings("unused")
    private static final Logger logger = Logger.getLogger(UserEnrollmentServiceImpl.class);
    @Autowired
    protected UserEnrollmentDao userEnrollmentDao;
    @Autowired
    protected SalahReportDao salahReportDao;
    @Autowired
    protected FoodReportDao foodReportDao;
    @Autowired
    protected OneRuleProgramReportDao oneRuleProgramReportDao;
    @Autowired
    protected UserProfileDao userProfileDao;
    @Autowired
    protected ProgramDao programDao;
    @Autowired
    protected EmailTemplate emailTemplate;
    @Autowired
    protected UserProgramHistoryDao userProgramHistoryDao;
    @Autowired
    protected GraphService graphService;

    @Override
    @Transactional
    public void saveReport(Report report) {
        this.salahReportDao.save(report);
    }

    @Override
    public Report getReportById(Integer id) {
        Report r = new SalahReport();
        r.setId(id);
        return this.salahReportDao.findById(id);
    }

//    @Override
//    public SalahReport getByEnrollment(Integer id) {
//        return this.salahReportDao.findByEnrollment(id);
//    }
    @Override
    public List<UserEnrollment> getActiveEnrollments() {
        // TODO
        Date dt = new Date(); // this date should handle locale and sunset timing
        return this.userEnrollmentDao.findByActiveAndNotDueAndReportDate(Boolean.TRUE, Boolean.FALSE, dt);
    }

    @Override
    public List<UserEnrollment> getDueEnrollments(Integer userId) {
        return this.userEnrollmentDao.findDueEnrollments(userId);
    }

//    @Override
//    public List<SalahReport> getByEnrollmentId(Integer id, Boolean isDue) {
//        return this.salahReportDao.findByEnrollmentId(id, isDue);
//    }
    /**
     * Initially No reports are due and enrollment is active
     * @param programId 
     */
    @Override
    @Transactional
    @Async
    public void enroll(Integer programId, String username) {

        UserProfile userProfile = this.userProfileDao.findByUsername(username);

        // user cannot enroll in more then 1 salah programs for same days rather doing this here
        // first thing user shouldn't see conflicting programs at all

        UserEnrollment userEnrollment = new UserEnrollment();

        userEnrollment.setUser(userProfile);
        userEnrollment.setResult("In Progress");
        userEnrollment.setIsReportDue(Boolean.FALSE);
        userEnrollment.setIsActive(Boolean.TRUE);

        Program program = programDao.findById(programId);
        userEnrollment.setProgram(program);

        userEnrollment.setReportDate(program.getStartDate());
        this.userEnrollmentDao.save(userEnrollment);

        createReports(program, userEnrollment);

        ProgramStructure programStructure = program.getProgramStructure();

        // add to UserProgramHistory
        updateUserProgramHistory(programStructure, userProfile, program);

        emailTemplate.sendEnrollment(userEnrollment);

    }

    private void createReports(Program program, UserEnrollment userEnrollment) {
        // create report days
        for (int i = 1; i <= program.getProgramStructure().getDays(); i++) {
            Report report = createReport(program, i);
            report.setUserEnrollment(userEnrollment);
            this.saveReport(report);
        }
    }

    private Report createReport(Program program, Integer day) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(program.getStartDate());
        cal.add(Calendar.DAY_OF_MONTH, day - 1);
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 1);
        if (program.getProgramStructure().getCategory().equalsIgnoreCase("Salah")) {
            return new SalahReport(day, cal.getTime(), cal.getTime(), Boolean.FALSE, Boolean.FALSE, 0, 0, 0, 0, 0, 0);
        } else if (program.getProgramStructure().getCategory().equalsIgnoreCase("Food")) {
            return new FoodReport(day, cal.getTime(), cal.getTime(), Boolean.FALSE, Boolean.FALSE, 0, 0, 0, 0);
        } else if (program.getProgramStructure().getCategory().equalsIgnoreCase("One")) {
            return new OneRuleProgramReport(day, cal.getTime(), cal.getTime(), Boolean.FALSE, Boolean.FALSE, 0);
        } else {
            throw new RuntimeException("Invalid Category");
        }
    }

    private void updateUserProgramHistory(ProgramStructure programStructure, UserProfile userProfile, Program program) {

        UserProgramHistory userProgramHistory = null;

        try {
            userProgramHistory = this.userProgramHistoryDao.findByProgramStructure(programStructure.getId(), userProfile.getId());
        } catch (RuntimeException ex) {
        }

        Calendar cal = Calendar.getInstance();
        cal.setTime(program.getStartDate());
        cal.add(Calendar.DAY_OF_MONTH, programStructure.getDays() - 1);

        if (userProgramHistory == null) {
            userProgramHistory = new UserProgramHistory(programStructure.getId(),
                    userProfile.getId(), 1, Boolean.TRUE, program.getStartDate(), cal.getTime());
        } else {
            userProgramHistory.setCurrent(Boolean.TRUE);
            userProgramHistory.setLastStartDate(program.getStartDate());
            userProgramHistory.setLastEndDate(cal.getTime());
            userProgramHistory.setTimes(userProgramHistory.getTimes() + 1);
        }

        this.userProgramHistoryDao.save(userProgramHistory);

    }

    @Override
    @Transactional
    public String submitSalah(Integer reportId, Integer fajr, Integer zuhr, Integer asr,
            Integer magrib, Integer isha, Boolean isSubmitted, String username) {

        Report r = this.getReportById(reportId);

        // Check owner is executing 
        if (!r.getUserEnrollment().getUser().getUsername().equals(username)) {
            throw new RuntimeException("Invalid Principal");
        }

        SalahReport sr = (SalahReport) r;
        sr.setFajr(fajr);
        sr.setZuhr(zuhr);
        sr.setAsr(asr);
        sr.setMagrib(magrib);
        sr.setIsha(isha);
        if (isSubmitted) {
            sr.setIsDue(Boolean.FALSE);
            sr.setIsSubmitted(Boolean.TRUE);
        }

        sr.setSubmittedDate(new Date());
        this.saveReport(sr);

        if (!isSubmitted) {
            return "g";
        }

        // update HistorySalah
        graphService.onSubmitSalah(sr.getUserEnrollment().getUserId(), sr.getReportDate(), sr.getFajr(), sr.getZuhr(), sr.getAsr(), sr.getMagrib(), sr.getIsha());

        UserEnrollment ue = sr.getUserEnrollment();
        ProgramStructure ps = r.getUserEnrollment().getProgram().getProgramStructure();
        if (logger.isTraceEnabled()) {
            logger.trace(" daySeq " + sr.getDaySequence());
            logger.trace(" total days " + ps.getDays());
        }
        String result = "i";
        if (sr.getDaySequence().equals(ps.getDays())) {
            // calculate total points and return result
            if (logger.isTraceEnabled()) {
                logger.trace(" Inside if ");
            }

            if (isPassed(ue)) {
                result = "p";
                notifyResult(ue, true);
                // TODO : send an congratulation email
            } else {
                result = "f";
                notifyResult(ue, false);
            }

            ue.setIsReportDue(Boolean.FALSE);
            ue.setIsActive(Boolean.FALSE);
            ue.setResult(result);
            this.userEnrollmentDao.save(ue);
            // history
            updateHistory(ps.getId(), ue.getUserId(), ue.getProgram().getStartDate(), ps.getDays());

            return result;



        }

        ue.setIsReportDue(Boolean.FALSE);
        this.userEnrollmentDao.save(ue);
        activateDueSingleReports(ue);

        List<SalahReport> reports = this.salahReportDao.findByEnrollmentId(ue.getId(), Boolean.TRUE);
        if (!reports.isEmpty()) {
            return "d";
        }

        return "g";
    }

    /**
     * Salah rule - Ok to miss only category of salah and max of 20%
     * @param ue
     * @return 
     */
    private boolean isPassed(UserEnrollment ue) {
        ProgramStructure ps = ue.getProgram().getProgramStructure();
        int totalPoints = 0;
        int score = 0;
        int minPass = 0;
        if (ps.getCategory().equalsIgnoreCase("salah")) {
            totalPoints = ps.getDays() * 5;

            List<SalahReport> reports = this.salahReportDao.findByEnrollmentId(ue.getId(), Boolean.FALSE);
            for (SalahReport sr : reports) {
                score += sr.getFajr() > 0 ? 1 : 0;
                score += sr.getZuhr() > 0 ? 1 : 0;
                score += sr.getAsr() > 0 ? 1 : 0;
                score += sr.getMagrib() > 0 ? 1 : 0;
                score += sr.getIsha() > 0 ? 1 : 0;
            }
        } else if (ps.getCategory().equalsIgnoreCase("food")) {
            totalPoints = ps.getDays() * 3;

            List<FoodReport> reports = this.foodReportDao.findByEnrollmentId(ue.getId(), Boolean.FALSE);
            for (FoodReport sr : reports) {
                score += sr.getBreakfast() > 0 ? 1 : 0;
                score += sr.getLunch() > 0 ? 1 : 0;
                score += sr.getDinner() > 0 ? 1 : 0;
            }
        } else if (ps.getCategory().equalsIgnoreCase("one")) {
            totalPoints = ps.getDays();

            List<OneRuleProgramReport> reports = this.oneRuleProgramReportDao.findByEnrollmentId(ue.getId(), Boolean.FALSE);
            for (OneRuleProgramReport sr : reports) {
                score += sr.getPoints() > 0 ? 1 : 0;
            }
        }

        minPass = (int) (totalPoints * 0.7);
        if (score < minPass) {
            return false;
        }
        return true;
    }

    private void updateHistory(Integer psId, Integer userId, Date start, int days) {
        UserProgramHistory userProgramHistory = null;
        try {
            userProgramHistory = this.userProgramHistoryDao.findByProgramStructure(psId, userId);
        } catch (RuntimeException ex) {
        }
        Calendar cal = Calendar.getInstance();
        cal.setTime(start);
        cal.add(Calendar.DAY_OF_MONTH, days - 1);
        if (userProgramHistory == null) {
            userProgramHistory = new UserProgramHistory(psId,
                    userId, 1, Boolean.FALSE, start, cal.getTime());
        }
        Date s = userProgramHistory.getLastEndDate();
        Date e = Calendar.getInstance().getTime();
        if (s.before(e) || s.equals(s)) {
            userProgramHistory.setCurrent(Boolean.FALSE);
        }
        this.userProgramHistoryDao.save(userProgramHistory);
    }

    private void notifyResult(UserEnrollment ue, boolean isPassed) {
        try {
            if (isPassed) {
                addPoints(ue);
                emailTemplate.sendCertificate(ue);
            } else {
                emailTemplate.sendFailure(ue);
            }

        } catch (RuntimeException ex) {
            logger.warn(ex.getMessage(), ex);
        }
    }

    private String upcomingPrograms(UserEnrollment ue) {
        StringBuilder sr = new StringBuilder();
        for (Program p : this.programDao.findByStatus(ue.getUser().getUsername())) {
            sr.append("<p>").append(p.getProgramStructure().getName()).append(" - ").append(p.getFormatedStartDate()).append("</p>");
        }
        sr.append("<p><a href=\"http://zytoon.me/home/index#new-programs\">Upcoming Programs page</a>.</p>");
        return sr.toString();
    }

    private void addPoints(UserEnrollment ue) {
        // 1 point for 3 Days
        // 2 points for 7 Days
        // 10 Points for 1 Month
        // 40 Points for 3 Months
        // 90 Points for 6 Months
        // 200 Points for 1 Year
        ProgramStructure ps = ue.getProgram().getProgramStructure();
        UserProfile up = ue.getUser();
        if (ps.getDays() == 3) {
            up.setPoints(up.getPoints() + 1);
        } else if (ps.getDays() == 7) {
            up.setPoints(up.getPoints() + 2);
        } else if (ps.getDays() >= 28 && ps.getDays() <= 31) {
            up.setPoints(up.getPoints() + 10);
        } else if (ps.getDays() >= 87 && ps.getDays() <= 92) {
            up.setPoints(up.getPoints() + 40);
        } else if (ps.getDays() >= 175 && ps.getDays() <= 185) {
            up.setPoints(up.getPoints() + 90);
        } else if (ps.getDays() >= 360 && ps.getDays() <= 366) {
            up.setPoints(up.getPoints() + 200);
        }

        this.userProfileDao.save(up);
    }

    @Override
    @Transactional
    public String submitFood(Integer reportId, Integer breakfast, Integer lunch, Integer dinner, Boolean isSubmitted, String username) {
        try {
            System.out.println(" submitFood1 -- ");
            FoodReport sr = this.foodReportDao.findById(reportId);//getReportById(reportId);
            System.out.println(" submitFood 2-- ");
            // Check owner is executing 
            if (!sr.getUserEnrollment().getUser().getUsername().equals(username)) {
                throw new RuntimeException("Invalid Principal");
            }

            sr.setBreakfast(breakfast);
            sr.setLunch(lunch);
            sr.setDinner(dinner);

            if (isSubmitted) {
                sr.setIsDue(Boolean.FALSE);
                sr.setIsSubmitted(Boolean.TRUE);
            }

            sr.setSubmittedDate(new Date());
            this.saveReport(sr);

            if (!isSubmitted) {
                return "g";
            }

            // update HistorySalah
            graphService.onSubmitFood(sr.getUserEnrollment().getUserId(), sr.getReportDate(), sr.getBreakfast(), sr.getLunch(), sr.getDinner());

            System.out.println(" submitFood 3-- ");

            UserEnrollment ue = sr.getUserEnrollment();
            ProgramStructure ps = ue.getProgram().getProgramStructure();
            if (logger.isTraceEnabled()) {
                logger.trace(" daySeq " + sr.getDaySequence());
                logger.trace(" total days " + ps.getDays());
            }
            String result = "i";
            if (sr.getDaySequence().equals(ps.getDays())) {
                // calculate total points and return result
                if (logger.isTraceEnabled()) {
                    logger.trace(" Inside if ");
                }

                if (isPassed(ue)) {
                    result = "p";
                    notifyResult(ue, true);
                    // TODO : send an congratulation email
                } else {
                    result = "f";
                    notifyResult(ue, false);
                }

                ue.setIsReportDue(Boolean.FALSE);
                ue.setIsActive(Boolean.FALSE);
                ue.setResult(result);
                this.userEnrollmentDao.save(ue);
                // history
                updateHistory(ps.getId(), ue.getUserId(), ue.getProgram().getStartDate(), ps.getDays());

                return result;
            }

            ue.setIsReportDue(Boolean.FALSE);
            this.userEnrollmentDao.save(ue);
            activateDueSingleReports(ue);

            List<FoodReport> reports = this.foodReportDao.findByEnrollmentId(ue.getId(), Boolean.TRUE);
            if (!reports.isEmpty()) {
                return "d";
            }

            return "g";
        } catch (RuntimeException re) {
            re.printStackTrace();
            logger.error(re);
        }
        return "";
    }

    @Override
    public List<ReportDto> getReports(String username) {
        // get due enrollments and retrieve reports
        //String username = SpringSecurityContext.getUsername();

        UserProfile userProfile = this.userProfileDao.findByUsername(username);
        List<UserEnrollment> list = getDueEnrollments(userProfile.getId());
        List<ReportDto> l = new ArrayList<ReportDto>();
        for (UserEnrollment ue : list) {
            ue.getUser();

            Program p = ue.getProgram();
            ProgramStructure ps = p.getProgramStructure();

            if (ps.getCategory().equalsIgnoreCase("salah")) {
                List<SalahReport> reports = this.salahReportDao.findByEnrollmentId(ue.getId(), Boolean.TRUE);
                for (SalahReport sr : reports) {
                    ReportDto dto = new ReportDto(sr.getId(), ps.getName(), ps.getDays(),
                            ps.getDescription(), ps.getCategory(), sr.getDaySequence(), sr.getReportDate(),
                            sr.getFajr(), sr.getZuhr(), sr.getAsr(), sr.getMagrib(), sr.getIsha());
                    l.add(dto);
                }
            } else if (ps.getCategory().equalsIgnoreCase("food")) {
                List<FoodReport> reports = this.foodReportDao.findByEnrollmentId(ue.getId(), Boolean.TRUE);
                for (FoodReport sr : reports) {
                    ReportDto dto = new ReportDto(sr.getId(), ps.getName(), ps.getDays(),
                            ps.getDescription(), ps.getCategory(), sr.getDaySequence(), sr.getReportDate(),
                            sr.getBreakfast(), sr.getLunch(), sr.getDinner(), 0, 0);
                    l.add(dto);
                }
            } else if (ps.getCategory().equalsIgnoreCase("one")) {
                List<OneRuleProgramReport> reports = this.oneRuleProgramReportDao.findByEnrollmentId(ue.getId(), Boolean.TRUE);
                for (OneRuleProgramReport sr : reports) {
                    ReportDto dto = new ReportDto(sr.getId(), ps.getName(), ps.getDays(),
                            ps.getDescription(), ps.getCategory(), sr.getDaySequence(), sr.getReportDate(),
                            sr.getPoints(), 0, 0, 0, 0);
                    l.add(dto);
                }
            }
        }

        return l;
    }

    @Async
    @Transactional
    private void activateDueSingleReports(UserEnrollment ue) {
        try {
            ProgramStructure ps = ue.getProgram().getProgramStructure();
            if (ps.getCategory().equalsIgnoreCase("salah")) {
                SalahReport reports = this.salahReportDao.findByEnrollment(ue.getId());
                // reports should be made due on due date
                if (reports.getDueDateTime().before(new Date())) {
                    reports.setIsDue(Boolean.TRUE);
                    saveReport(reports);
                    ue.setIsReportDue(Boolean.TRUE);
                    Calendar dt = Calendar.getInstance();
                    dt.add(Calendar.DAY_OF_MONTH, 0);
                    ue.setReportDate(dt.getTime());
                    this.userEnrollmentDao.save(ue);
                }
            } else if (ps.getCategory().equalsIgnoreCase("food")) {
                FoodReport reports = this.foodReportDao.findByEnrollment(ue.getId());
                // reports should be made due on due date
                if (reports.getDueDateTime().before(new Date())) {
                    reports.setIsDue(Boolean.TRUE);
                    saveReport(reports);
                    ue.setIsReportDue(Boolean.TRUE);
                    Calendar dt = Calendar.getInstance();
                    dt.add(Calendar.DAY_OF_MONTH, 0);
                    ue.setReportDate(dt.getTime());
                    this.userEnrollmentDao.save(ue);
                }
            } else if (ps.getCategory().equalsIgnoreCase("one")) {
                OneRuleProgramReport reports = this.oneRuleProgramReportDao.findByEnrollment(ue.getId());
                // reports should be made due on due date
                if (reports.getDueDateTime().before(new Date())) {
                    reports.setIsDue(Boolean.TRUE);
                    saveReport(reports);
                    ue.setIsReportDue(Boolean.TRUE);
                    Calendar dt = Calendar.getInstance();
                    dt.add(Calendar.DAY_OF_MONTH, 0);
                    ue.setReportDate(dt.getTime());
                    this.userEnrollmentDao.save(ue);
                }
            }

        } catch (RuntimeException ex) {
            logger.error(ex.getMessage(), ex);
        }
    }

    @Override
    public List<Program> getMyEnrollments(String username) {
        List<Program> list = null;
        try {
            list = this.userEnrollmentDao.findActivePrograms(username);
        } catch (Exception ex) {
        }
        if (list == null) {
            list = new ArrayList<Program>();
        }
        return list;
    }

    @Override
    @Transactional
    public String submitOneRuleProgram(Integer reportId, int yes, String username) {
        try {
            OneRuleProgramReport sr = this.oneRuleProgramReportDao.findById(reportId);//getReportById(reportId);
            // Check owner is executing 
            if (!sr.getUserEnrollment().getUser().getUsername().equals(username)) {
                throw new RuntimeException("Invalid Principal");
            }

//            sr.setBreakfast(breakfast);
//            sr.setLunch(lunch);
//            sr.setDinner(dinner);
            sr.setPoints(yes);
            sr.setIsDue(Boolean.FALSE);
            sr.setIsSubmitted(Boolean.TRUE);

            sr.setSubmittedDate(new Date());
            this.salahReportDao.save(sr);

//            if (!isSubmitted) {
//                return "g";
//            }

            // update HistorySalah
            graphService.onSubmitOneRuleProgram(sr.getUserEnrollment().getUserId(), sr.getUserEnrollment().getProgram().getProgramStructure().getCategoryId(), sr.getReportDate(), sr.getPoints());


            UserEnrollment ue = sr.getUserEnrollment();
            ProgramStructure ps = ue.getProgram().getProgramStructure();
            if (logger.isTraceEnabled()) {
                logger.trace(" daySeq " + sr.getDaySequence());
                logger.trace(" total days " + ps.getDays());
            }
            String result = "i";
            if (sr.getDaySequence().equals(ps.getDays())) {
                // calculate total points and return result
                if (logger.isTraceEnabled()) {
                    logger.trace(" Inside if ");
                }

                if (isPassed(ue)) {
                    result = "p";
                    notifyResult(ue, true);
                    // TODO : send an congratulation email
                } else {
                    result = "f";
                    notifyResult(ue, false);
                }

                ue.setIsReportDue(Boolean.FALSE);
                ue.setIsActive(Boolean.FALSE);
                ue.setResult(result);
                this.userEnrollmentDao.save(ue);
                // history
                updateHistory(ps.getId(), ue.getUserId(), ue.getProgram().getStartDate(), ps.getDays());

                return result;
            }

            ue.setIsReportDue(Boolean.FALSE);
            this.userEnrollmentDao.save(ue);
            activateDueSingleReports(ue);

            List<OneRuleProgramReport> reports = this.oneRuleProgramReportDao.findByEnrollmentId(ue.getId(), Boolean.TRUE);
            if (!reports.isEmpty()) {
                return "d";
            }

            return "g";
        } catch (RuntimeException re) {
            re.printStackTrace();
            logger.error(re);
        }
        return "";
    }
}
