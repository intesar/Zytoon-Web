/*
 * (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 * Source code generated by Celerio, a Jaxio product
 * Want to use Celerio within your company? email us at info@jaxio.com
 * Follow us on twitter: @springfuse
 * Template pack-backend:src/main/java/project/manager/ManagerImpl.e.vm.java
 */
package com.bizintelapps.zytoon.service;

import com.bizintelapps.zytoon.dao.FoodReportDao;
import com.bizintelapps.zytoon.dao.OneRuleProgramReportDao;
import com.bizintelapps.zytoon.service.util.EmailTemplate;
import com.bizintelapps.zytoon.domain.ProgramStructure;
import java.util.ArrayList;
import java.util.List;
import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bizintelapps.zytoon.domain.Program;
import com.bizintelapps.zytoon.dao.ProgramDao;
import com.bizintelapps.zytoon.dao.ProgramStructureDao;
import com.bizintelapps.zytoon.dao.SalahReportDao;
import com.bizintelapps.zytoon.dao.UserEnrollmentDao;
import com.bizintelapps.zytoon.dao.UserProfileDao;
import com.bizintelapps.zytoon.dao.UserProgramHistoryDao;
import com.bizintelapps.zytoon.domain.FoodReport;
import com.bizintelapps.zytoon.domain.OneRuleProgramReport;
import com.bizintelapps.zytoon.domain.SalahReport;
import com.bizintelapps.zytoon.domain.UserEnrollment;
import com.bizintelapps.zytoon.domain.UserProfile;
import com.bizintelapps.zytoon.domain.UserProgramHistory;
import java.util.Calendar;

import java.util.Date;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * Default implementation of the {@link ProgramService} interface
 * @see ProgramService
 */
@Service("programService")
@Transactional(propagation = Propagation.REQUIRED, readOnly = true)
public class ProgramServiceImpl implements ProgramService {

    @SuppressWarnings("unused")
    private static final Logger logger = Logger.getLogger(ProgramServiceImpl.class);
    @Autowired
    protected ProgramDao programDao;
    @Autowired
    protected UserProfileDao userProfileDao;
    @Autowired
    protected UserEnrollmentService enrollmentService;
    @Autowired
    protected UserEnrollmentDao userEnrollmentDao;
    @Autowired
    protected ProgramStructureDao programStructureDao;
    @Autowired
    protected EmailTemplate emailTemplate;
    @Autowired
    protected SalahReportDao reportDao;
    @Autowired
    protected FoodReportDao foodReportDao;
    @Autowired
    protected OneRuleProgramReportDao oneRuleProgramReportDao;
    @Autowired
    protected UserProgramHistoryDao userProgramHistoryDao;

    @Override
    @Cacheable("getEligiblePrograms")
    public List<Program> getEligiblePrograms(String username) {
        if (logger.isTraceEnabled()) {
            logger.trace("getEligiblePrograms " + username);
        }
        // Program's which user is currently not enrolled
        // or graduated
        // or who's prerequisites completed by user
        // or which doesn't have prerequisites
        // and Program who's status is active
        // Todo: and whos dates doesn't conflict with users calendar
        //userProfileDao.findByUsername(username);
        List<Program> list = this.programDao.findByStatus(username);

        List<UserProgramHistory> histories = retreiveHistories(list, username);

        attachHistory(list, histories);

        return list;
    }

    private List<UserProgramHistory> retreiveHistories(List<Program> list, String username) {
        if (list == null || list.isEmpty()) {
            return null;
        }

        List<Integer> ids = new ArrayList<Integer>(list.size());
        for (Program program : list) {
            ids.add(program.getProgramStructureId());
        }
        Integer userId = this.userProfileDao.findByUsername(username).getId();
        return this.userProgramHistoryDao.findByProgramStructureIds(ids, userId);
    }

    private void attachHistory(List<Program> programs, List<UserProgramHistory> historys) {
        for (Program program : programs) {
            UserProgramHistory history = getHistory(historys, program.getProgramStructureId());
            program.setHistory(history);
        }
    }

    private UserProgramHistory getHistory(List<UserProgramHistory> historys, Integer psId) {
        for (UserProgramHistory h : historys) {
            if (h.getProgramStructureId().equals(psId)) {
                return h;
            }
        }
        return new UserProgramHistory(0, Boolean.TRUE, 0);

    }

    // --------------------------- jobs --------- //
    @Override
    @Transactional
    public void updateExpiredPrograms() {
        Calendar cal = Calendar.getInstance();
        //cal.add(Calendar.DAY_OF_MONTH, 8); // Testing
        this.programDao.updateExpiredPrograms(cal.getTime());
        // send admin report
        this.emailTemplate.sendEmail("mdshannan@gmail.com", "Admin Notification updateExpiredPrograms() executed successfully!", "");
    }

    @Override
    @Transactional
    public void programCeationJob() {
        Calendar cal = Calendar.getInstance();
        if (cal.get(Calendar.DAY_OF_WEEK) == 6) {
            cal.add(Calendar.DAY_OF_MONTH, 3);
        }
        if (cal.get(Calendar.DAY_OF_WEEK) == 5) {
            cal.add(Calendar.DAY_OF_MONTH, 1);
        } else {
            cal.add(Calendar.DAY_OF_MONTH, 2);
        }

        List<ProgramStructure> list = this.programStructureDao.findAll();
        List<Program> programs = new ArrayList<Program>();
        // create programs
        for (ProgramStructure structure : list) {
            Program program = new Program();
            program.setIsActive(Boolean.TRUE);
            program.setProgramStructure(structure);
            program.setStartDate(cal.getTime());
            programs.add(program);
        }
        this.programDao.save(programs);
        
        // send admin report
        this.emailTemplate.sendEmail("mdshannan@gmail.com", "Admin Notification programCeationJob() executed secessfully!", "Total Programs Created = " + (programs == null ? 0 : programs.size()));
    }

    @Deprecated
    public void programCeationJobOld() {
        if (logger.isTraceEnabled()) {
            logger.trace("Started programCeationJob");
        }
        // find day of week and day of month
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -3);
        int dayOfWeek = cal.get(Calendar.DAY_OF_WEEK);
        int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);

        // get all programstructure which are scheduled
        List<ProgramStructure> list = this.programStructureDao.ProgramStructureByDayOfWeekAndMonth(dayOfWeek, dayOfMonth);
        //List<Program> programs = new ArrayList<Program>();
        // create programs
        for (ProgramStructure structure : list) {
            Program program = new Program();
            program.setIsActive(Boolean.TRUE);
            program.setProgramStructure(structure);
            program.setStartDate(cal.getTime());
            
            this.programDao.save(program);
            //programs.add(program);
        }
        //this.programDao.save(programs);
        if (logger.isTraceEnabled()) {
            logger.trace("Total programs created " + list.size());
        }
    }

    // @link http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger
    // Every Mon, Fri at 3:30 PM
    @Override
    public void notifyDueReports() {
        if (logger.isTraceEnabled()) {
            logger.trace("Cron instantiated");
        }
        int count = 0;
        int totalDue = 0;    
        List<UserProfile> userProfiles = null;
        try {
            // Notify users if reports are due for 2 days
            Calendar cal = Calendar.getInstance();
            cal.add(Calendar.DAY_OF_MONTH, -1);

            userProfiles = userEnrollmentDao.findUserByDueEnrollmentAndDate(cal.getTime());


            String subject = "Zytoon.me friendly reminder - Report Card Due";
            for (UserProfile userProfile : userProfiles) {
                totalDue ++;
                if (userProfile.isNotifyReportDue()) {
                    this.emailTemplate.sendReminder(userProfile.getUsername(), subject, userProfile.getFirstName());
                    count ++;
                }
            }
        } catch (RuntimeException ex) {
            logger.warn(ex.getMessage(), ex);
        }
        // send admin report
        this.emailTemplate.sendEmail("mdshannan@gmail.com", "Admin Notification Reports Due", "Total emails send " + count + " Of " + totalDue);
    }

    /**
     * Every Day -- One Item in an Enrollment should get Active and also indicating Enrollment's isReportDue as true
     */
    @Override
    @Transactional
    public void activateDueReports() {
        Date dt1 = new Date(); // though this date should handle locale and sunset timing
        List<UserEnrollment> activeUserEnrollments = this.userEnrollmentDao.findByActiveAndNotDueAndReportDate(Boolean.TRUE, Boolean.FALSE, dt1);

        try {
            // find all active and isReportDue=false and reportDate <= today (sunset) enrollment's
            // TODO

            if (logger.isTraceEnabled()) {
                logger.trace(" enrollments size " + activeUserEnrollments.size());
            }
            for (UserEnrollment ue : activeUserEnrollments) {
                if (ue.getProgram().getProgramStructure().getCategory().equalsIgnoreCase("salah")) {
                    activateSalah(ue);
                } else if (ue.getProgram().getProgramStructure().getCategory().equalsIgnoreCase("food")) {
                    activateFood(ue);
                } else if (ue.getProgram().getProgramStructure().getCategory().equalsIgnoreCase("one")) {
                    activateOne(ue);
                }
            }
        } catch (RuntimeException ex) {
            logger.warn(ex.getMessage(), ex);
        }
        
        // send admin report
        this.emailTemplate.sendEmail("mdshannan@gmail.com", "Admin Notification activateDueReportsJob executed successfully", "Total Reports activated = " + (activeUserEnrollments != null ? activeUserEnrollments.size() : 0));
    }

    private void activateSalah(UserEnrollment ue) {
        try {
            // get next inactive report
            if (logger.isTraceEnabled()) {
                logger.trace(" enrollments id " + ue.getId());
            }

            SalahReport reports = this.reportDao.findByEnrollment(ue.getId());
            if (logger.isTraceEnabled()) {
                logger.trace(" report id " + reports.getId());
            }
            // reports should be made due on due date
            if (reports.getDueDateTime().before(new Date())) {
                reports.setIsDue(Boolean.TRUE);
                this.reportDao.save(reports);
                ue.setIsReportDue(Boolean.TRUE);
                Calendar dt = Calendar.getInstance();
                dt.add(Calendar.DAY_OF_MONTH, 0);
                ue.setReportDate(dt.getTime());
                this.userEnrollmentDao.save(ue);
            }

        } catch (RuntimeException ex) {
            logger.warn(ex.getMessage(), ex);
        }
    }

    private void activateFood(UserEnrollment ue) {
        try {
            // get next inactive report
            if (logger.isTraceEnabled()) {
                logger.trace(" enrollments id " + ue.getId());
            }

            FoodReport reports = this.foodReportDao.findByEnrollment(ue.getId());
            if (logger.isTraceEnabled()) {
                logger.trace(" report id " + reports.getId());
            }
            // reports should be made due on due date
            if (reports.getDueDateTime().before(new Date())) {
                reports.setIsDue(Boolean.TRUE);
                this.foodReportDao.save(reports);
                ue.setIsReportDue(Boolean.TRUE);
                Calendar dt = Calendar.getInstance();
                dt.add(Calendar.DAY_OF_MONTH, 0);
                ue.setReportDate(dt.getTime());
                this.userEnrollmentDao.save(ue);
            }

        } catch (RuntimeException ex) {
            logger.warn(ex.getMessage(), ex);
        }
    }
    
    private void activateOne(UserEnrollment ue) {
        try {
            // get next inactive report
            if (logger.isTraceEnabled()) {
                logger.trace(" enrollments id " + ue.getId());
            }

            OneRuleProgramReport reports = this.oneRuleProgramReportDao.findByEnrollment(ue.getId());
            if (logger.isTraceEnabled()) {
                logger.trace(" report id " + reports.getId());
            }
            // reports should be made due on due date
            if (reports.getDueDateTime().before(new Date())) {
                reports.setIsDue(Boolean.TRUE);
                this.oneRuleProgramReportDao.save(reports);
                ue.setIsReportDue(Boolean.TRUE);
                Calendar dt = Calendar.getInstance();
                dt.add(Calendar.DAY_OF_MONTH, 0);
                ue.setReportDate(dt.getTime());
                this.userEnrollmentDao.save(ue);
            }

        } catch (RuntimeException ex) {
            logger.warn(ex.getMessage(), ex);
        }
    }

    /**
     * Every Day -- One Item in an Enrollment should get Active and also indicating Enrollment's isReportDue as true
     */
    @Override
    public void notifyNonEnrolledUsers() {
        if (logger.isTraceEnabled()) {
            logger.trace(" Started ");
        }
        // all users who's enrollment was 3 days agao
        Calendar cal = Calendar.getInstance();

        if (cal.get(Calendar.DAY_OF_WEEK) == 6) {
            cal.add(Calendar.DAY_OF_MONTH, 3);
        } else {
            cal.add(Calendar.DAY_OF_MONTH, 2);
        }

        List<UserProfile> users = this.userEnrollmentDao.findByInactivity(cal.getTime());
        for (UserProfile user : users) {
            List<Program> programs = getEligiblePrograms(user.getUsername());
            StringBuilder result = new StringBuilder();
            result.append("Assalamu Alaikum Dear ").append(user.getFirstName()).append(",").append("<br/>");
            result.append("Please checkout the New Upcoming Programs!").append("<br/>");
            for (Program program : programs) {
                ProgramStructure ps = program.getProgramStructure();
                result.append("<p><b>");
                result.append(ps.getDays()).append(" ").append("Days, ");
                result.append(ps.getName()).append(" - ").append(program.getFormatedStartDate());
                result.append("</b></p>");
            }
            result.append("<p><a href=\"http://zytoon.me/home/index#new-programs\" >Upcoming Program Page</a>");
            if (logger.isTraceEnabled()) {
                logger.trace(result.toString());
            }
            emailTemplate.sendEmail(user.getUsername(), "Upcoming New Programs", result.toString());
        }
    }
}
