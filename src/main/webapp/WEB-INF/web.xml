<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! (c) Copyright 2005-2011 JAXIO, www.jaxio.com
 ! Source code generated by Celerio, a Jaxio product
 ! Want to use Celerio within your company? email us at info@jaxio.com
 ! Follow us on twitter: @springfuse
 ! Template pack-mvc-3:src/main/webapp/WEB-INF/web.p.vm.xml
-->
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <!-- Filters -->
    <filter>
        <filter-name>monitoring</filter-name>
        <filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>monitoring</filter-name>
        <url-pattern>/home/*</url-pattern>
    </filter-mapping>
    <listener>
        <listener-class>net.bull.javamelody.SessionListener</listener-class>
    </listener>
    <filter>
        <description>
			Url rewrite engine that acts as a mod_rewrite, uses the configuration located at WEB-INF/urlrewrite.xml
			see http://tuckey.org/urlrewrite/
 		
        </description>
        <description/>
        <filter-name>rewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>rewriteFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    <filter>
        <description>
			Specify a character encoding for requests.
			This is useful because current browsers typically do not set a character encoding even if specified in the HTML page or form.
 		
        </description>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/app/*</url-pattern>
    </filter-mapping>
    <!--
    <filter>
        <description>
			Return compressed output if the client accepts it
 		
        </description>
        <filter-name>gzipFilter</filter-name>
        <filter-class>net.sf.ehcache.constructs.web.filter.GzipFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>gzipFilter</filter-name>
        <url-pattern>*</url-pattern>
    </filter-mapping>
    -->
    <filter>
        <description/>
        <description>
			Generates an ETag value based on the content on the response.
			see http://en.wikipedia.org/wiki/HTTP_ETag for more details
 		
        </description>
        <filter-name>etagFilter</filter-name>
        <filter-class>org.springframework.web.filter.ShallowEtagHeaderFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>etagFilter</filter-name>
        <servlet-name>*</servlet-name>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    <filter>
        <description>
			Binds a JPA EntityManager to the thread for the entire processing of the request
 		
        </description>
        <filter-name>openEntityManagerInViewFilter</filter-name>
        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>openEntityManagerInViewFilter</filter-name>
        <url-pattern>/app/*</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    <filter>
        <description>
			Let springsecurity block/redirect/pass depending on configuration
 		
        </description>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    <filter>
        <description>
			Convert posted method parameters into HTTP method, since browsers currently only support GET and POST.
		
        </description>
        <filter-name>httpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>httpMethodFilter</filter-name>
        <url-pattern>/app/*</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    <filter>
        <description>
			Decorates the output view given the configuration found in WEB-INF/sitemesh.xml
			see http://www.opensymphony.com/sitemesh/ for more details
		
        </description>
        <filter-name>sitemeshFilter</filter-name>
        <filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>sitemeshFilter</filter-name>
        <url-pattern>/app/*</url-pattern>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>REQUEST</dispatcher>
    </filter-mapping>
    <!-- Listeners -->
    <context-param>
        <description>Context Configuration locations for Spring XML files</description>
        <param-name>contextConfigLocation</param-name>
        <param-value>
                        classpath*:net/bull/javamelody/monitoring-spring.xml
			classpath*:spring/applicationContext.xml
                        classpath*:spring/applicationContext-ajax.xml
			WEB-INF/spring/spring-security-http.xml
        </param-value>
    </context-param>
    <listener>
        <description>
			Loads the root application context of this web app at startup, use 
			contextConfigLocation paramters defined above or by default use "/WEB-INF/applicationContext.xml".
			- Note that you need to fall back to Spring's ContextLoaderServlet for
			- J2EE servers that do not follow the Servlet 2.4 initialization order.
			
			Use WebApplicationContextUtils.getWebApplicationContext(servletContext) to access it anywhere in the web application, outside of the framework.
			
			The root context is the parent of all servlet-specific contexts.
			This means that its beans are automatically available in these child contexts,
			both for getBean(name) calls and (external) bean references.
		
        </description>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <listener>
        <description>Required so we can use spring bean with scope session in sitemesh template</description>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    <listener>
        <description>so logout can be done in a clean way upon session expiration</description>
        <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
    </listener>
    <listener>
        <description>
			Context listener creation and destruction to ensure that conditions such as
			file.encoding=UTF-8 are met.
		
        </description>
        <listener-class>com.bizintelapps.zytoon.web.listener.StartupListener</listener-class>
    </listener>
    <listener>
        <description>Example of hooks on http session creation and destruction</description>
        <listener-class>com.bizintelapps.zytoon.web.listener.SessionListener</listener-class>
    </listener>
    <!-- Servlets -->
    <servlet>
        <description>Configuration for the Spring MVC webapp servlet</description>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>WEB-INF/spring/spring-mvc.xml</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <url-pattern>/app/*</url-pattern>
    </servlet-mapping>
    <servlet>
        <servlet-name>dwr-invoker</servlet-name>
        <servlet-class>org.directwebremoting.spring.DwrSpringServlet</servlet-class>
        <init-param>
            <param-name>debug</param-name>
            <param-value>false</param-value>
        </init-param>
    </servlet>
    <servlet-mapping>
        <servlet-name>dwr-invoker</servlet-name>
        <url-pattern>/dwr/*</url-pattern>
    </servlet-mapping>
    <session-config>
        <!-- session timeout (in minutes) -->
        <session-timeout>10080</session-timeout>
    </session-config>
    <!-- Mime types -->
    <mime-mapping>
        <extension>css</extension>
        <mime-type>text/css</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>gif</extension>
        <mime-type>image/gif</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>html</extension>
        <mime-type>text/html</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>htm</extension>
        <mime-type>text/html</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>ico</extension>
        <mime-type>image/x-icon</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>jpeg</extension>
        <mime-type>image/jpeg</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>jpg</extension>
        <mime-type>image/jpeg</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>js</extension>
        <mime-type>application/x-javascript</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>png</extension>
        <mime-type>image/png</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>txt</extension>
        <mime-type>text/plain</mime-type>
    </mime-mapping>
    <mime-mapping>
        <extension>xml</extension>
        <mime-type>text/xml</mime-type>
    </mime-mapping>
    <!-- error pages -->
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/views/errors/404.jsp</location>
    </error-page>
    <error-page>
        <exception-type>java.lang.Exception</exception-type>
        <location>/WEB-INF/views/errors/uncaught-error.jsp</location>
    </error-page>
</web-app>
